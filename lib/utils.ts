import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";

// generated by shadcn
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

// created by chatgpt
export function isBase64Image(imageData: string) {
  const base64Regex = /^data:image\/(png|jpe?g|gif|webp);base64,/;
  return base64Regex.test(imageData);
}

// created by chatgpt
export function formatDateString(dateString: string) {
  const options: Intl.DateTimeFormatOptions = {
    year: "numeric",
    month: "short",
    day: "numeric",
  };

  const date = new Date(dateString);
  const formattedDate = date.toLocaleDateString("en-US", options);

  const time = date.toLocaleTimeString("en-US", {
    hour: "numeric",
    minute: "2-digit",
  });

  return `${time} - ${formattedDate}`;
}

// created by chatgpt
export function formatThreadCount(count: number): string {
  if (count === 0) {
    return "No Threads";
  } else {
    const threadCount = count.toString().padStart(2, "0");
    const threadWord = count === 1 ? "Thread" : "Threads";
    return `${threadCount} ${threadWord}`;
  }
}

export function timeAgo(date: string) {
  const currentDate = new Date();
  const timestamp = new Date(date).getTime();
  const currentTimestamp = currentDate.getTime();
  const timeDifference = currentTimestamp - timestamp;

  const calculateTimeUnit = (unit: any, value: any) => {
    return value === 1 ? `${value} ${unit}` : `${value} ${unit}s`;
  };

  const minute = 60 * 1000;
  const hour = 60 * minute;
  const day = 24 * hour;
  const month = 30 * day;
  const year = 365 * day;

  if (timeDifference < minute) {
    return (
      calculateTimeUnit("second", Math.round(timeDifference / 1000)) + " ago"
    );
  } else if (timeDifference < hour) {
    return (
      calculateTimeUnit("minute", Math.round(timeDifference / minute)) + " ago"
    );
  } else if (timeDifference < day) {
    return (
      calculateTimeUnit("hour", Math.round(timeDifference / hour)) + " ago"
    );
  } else if (timeDifference < month) {
    return calculateTimeUnit("day", Math.round(timeDifference / day)) + " ago";
  } else if (timeDifference < year) {
    return (
      calculateTimeUnit("month", Math.round(timeDifference / month)) + " ago"
    );
  } else {
    return (
      calculateTimeUnit("year", Math.round(timeDifference / year)) + " ago"
    );
  }
}
